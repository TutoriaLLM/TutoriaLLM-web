version: "3.8"

services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - --api.insecure=true
      - --accesslog=true
      - --accesslog.addinternals
      - --metrics.addinternals
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=$EMAIL
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /letsencrypt:/letsencrypt
    depends_on:
      - app

  redis:
    container_name: code-tutorial-redis-prod
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    restart: always

  db:
    container_name: code-tutorial-db-prod
    image: pgvector/pgvector:pg14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    volumes:
      - db_data_db:/var/lib/postgresql/data
    restart: always

  app:
    container_name: code-tutorial-app-prod
    image: soumame/tutoriallm:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-tutorial-app-prod-http.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.code-tutorial-app-prod-http.entrypoints=web"
      - "traefik.http.routers.code-tutorial-app-prod-https.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.code-tutorial-app-prod-https.entrypoints=websecure"
      - "traefik.http.routers.code-tutorial-app-prod-https.tls.certresolver=myresolver"
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./app_data:/app_data

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300

volumes:
  db_data_db:
  letsencrypt:
